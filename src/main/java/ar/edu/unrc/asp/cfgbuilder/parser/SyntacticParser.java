
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 14 17:56:59 ART 2016
//----------------------------------------------------

package ar.edu.unrc.asp.cfgbuilder.parser;

import java_cup.runtime.*;
import java.io.FileReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 14 17:56:59 ART 2016
  */
public class SyntacticParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntacticParser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntacticParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\003\000\002\004\016\000\002\004\012" +
    "\000\002\004\012\000\002\005\005\000\002\003\003\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\006\003\000\002\006\003\000\002\007\003" +
    "\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\010\020\007\021\010\025\004\001\002\000" +
    "\036\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\025\uffef\001\002\000\014\002\uffff\013\uffff\020\uffff" +
    "\021\uffff\025\uffff\001\002\000\014\002\ufffe\013\ufffe\020" +
    "\ufffe\021\ufffe\025\ufffe\001\002\000\004\012\055\001\002" +
    "\000\004\010\042\001\002\000\012\002\041\020\007\021" +
    "\010\025\004\001\002\000\004\014\013\001\002\000\006" +
    "\025\004\026\017\001\002\000\026\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\013\ufff0\020\ufff0\021\ufff0" +
    "\025\ufff0\001\002\000\026\002\ufff9\004\030\005\032\006" +
    "\033\007\031\011\ufff9\013\ufff9\020\ufff9\021\ufff9\025\ufff9" +
    "\001\002\000\014\002\ufffa\013\ufffa\020\ufffa\021\ufffa\025" +
    "\ufffa\001\002\000\026\002\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\011\uffee\013\uffee\020\uffee\021\uffee\025\uffee\001" +
    "\002\000\034\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\013\ufff1\015\022\016\023\017\021\020\ufff1\021" +
    "\ufff1\025\ufff1\001\002\000\006\025\004\026\017\001\002" +
    "\000\006\025\004\026\017\001\002\000\006\025\004\026" +
    "\017\001\002\000\016\002\ufff3\011\ufff3\013\ufff3\020\ufff3" +
    "\021\ufff3\025\ufff3\001\002\000\016\002\ufff1\011\ufff1\013" +
    "\ufff1\020\ufff1\021\ufff1\025\ufff1\001\002\000\016\002\ufff2" +
    "\011\ufff2\013\ufff2\020\ufff2\021\ufff2\025\ufff2\001\002\000" +
    "\016\002\ufff4\011\ufff4\013\ufff4\020\ufff4\021\ufff4\025\ufff4" +
    "\001\002\000\006\025\004\026\017\001\002\000\006\025" +
    "\004\026\017\001\002\000\006\025\004\026\017\001\002" +
    "\000\006\025\004\026\017\001\002\000\016\002\ufff6\011" +
    "\ufff6\013\ufff6\020\ufff6\021\ufff6\025\ufff6\001\002\000\016" +
    "\002\ufff7\011\ufff7\013\ufff7\020\ufff7\021\ufff7\025\ufff7\001" +
    "\002\000\016\002\ufff5\011\ufff5\013\ufff5\020\ufff5\021\ufff5" +
    "\025\ufff5\001\002\000\016\002\ufff8\011\ufff8\013\ufff8\020" +
    "\ufff8\021\ufff8\025\ufff8\001\002\000\014\002\001\013\001" +
    "\020\001\021\001\025\001\001\002\000\004\002\000\001" +
    "\002\000\006\025\004\026\017\001\002\000\004\011\044" +
    "\001\002\000\004\023\045\001\002\000\004\012\046\001" +
    "\002\000\010\020\007\021\010\025\004\001\002\000\012" +
    "\013\050\020\007\021\010\025\004\001\002\000\016\002" +
    "\ufffc\013\ufffc\020\ufffc\021\ufffc\022\051\025\ufffc\001\002" +
    "\000\004\012\052\001\002\000\010\020\007\021\010\025" +
    "\004\001\002\000\012\013\054\020\007\021\010\025\004" +
    "\001\002\000\014\002\ufffd\013\ufffd\020\ufffd\021\ufffd\025" +
    "\ufffd\001\002\000\010\020\007\021\010\025\004\001\002" +
    "\000\012\013\057\020\007\021\010\025\004\001\002\000" +
    "\004\024\060\001\002\000\004\010\061\001\002\000\006" +
    "\025\004\026\017\001\002\000\004\011\063\001\002\000" +
    "\014\002\ufffb\013\ufffb\020\ufffb\021\ufffb\025\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\061\000\012\002\010\004\004\005\005\007\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\037\005" +
    "\005\007\011\001\001\000\002\001\001\000\012\003\015" +
    "\006\014\007\017\010\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\026\007\024\010\013\001\001\000" +
    "\010\006\025\007\024\010\013\001\001\000\010\006\023" +
    "\007\024\010\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\036" +
    "\007\024\010\013\001\001\000\010\006\035\007\024\010" +
    "\013\001\001\000\010\006\034\007\024\010\013\001\001" +
    "\000\010\006\033\007\024\010\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\042\006" +
    "\014\007\017\010\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\046\004\004\005" +
    "\005\007\011\001\001\000\010\004\037\005\005\007\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\052\004\004\005\005\007\011\001\001\000\010\004\037" +
    "\005\005\007\011\001\001\000\002\001\001\000\012\002" +
    "\055\004\004\005\005\007\011\001\001\000\010\004\037" +
    "\005\005\007\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\061\006\014\007\017\010\013\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    public Object previousNode = null;

    public void processNode(Object s){
        if(s != null){
            if(s != null){
                if(previousNode == null){
                    System.out.println("Entry -> "+s);
                }else{
                    System.out.println(previousNode +" -> "+s);
                }
                previousNode = s;
            }
        }
    }

    public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Message: "+message);
		System.out.println("info: "+info.toString());
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de lÃ­nea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" in the line "+(s.left+1));
				/*Comprueba si el numero de columna es mayoro igual que cero */
				if (s.right >= 0)
					m.append(", and column "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntacticParser$actions {
  private final SyntacticParser parser;

  /** Constructor */
  CUP$SyntacticParser$actions(SyntacticParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntacticParser$do_action(
    int                        CUP$SyntacticParser$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticParser$parser,
    java.util.Stack            CUP$SyntacticParser$stack,
    int                        CUP$SyntacticParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticParser$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Integer ::= INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                    RESULT = i;
                
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Integer",6, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Identifier ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                    RESULT = i;
                
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Identifier",5, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Value ::= Integer 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                    RESULT = i;
                
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Value",4, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Value ::= Identifier 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                    RESULT = i;
                
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Value",4, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expression ::= Identifier EQL Value 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = new String(i1.toString() + "==" + i2.toString());
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expression ::= Identifier LSS Value 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = new String(i1.toString() + "<" + i2.toString());
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expression ::= Identifier GRT Value 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = new String(i1.toString() + ">" + i2.toString());
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expression ::= Value SLASH Value 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = new String(i1.toString() + "/" + i2.toString());
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expression ::= Value TIMES Value 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = new String(i1.toString() + "*" + i2.toString());
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expression ::= Value MINUS Value 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = new String(i1.toString() + "-" + i2.toString());
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expression ::= Value PLUS Value 
            {
              Object RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).right;
		Object i1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = new String(i1.toString() + "+" +  i2.toString());
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression ::= Value 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = i;
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Expression",1, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Assignment ::= Identifier BECOMES Expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                      RESULT = new String(i.toString() + ":=" + e.toString());
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Assignment",3, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= DOSYM LBRACE Grammar RBRACE WHILESYM LPAREN Expression RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).value;
		                      
                        //parser.processNode(e);
                        System.out.println(e);
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= IFSYM LPAREN Expression RPAREN THENSYM LBRACE Grammar RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).value;
		
                        //parser.processNode(e);
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= IFSYM LPAREN Expression RPAREN THENSYM LBRACE Grammar RBRACE ELSESYM LBRACE Grammar RBRACE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-9)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).value;
		                         
                         //parser.processNode(e);
                         System.out.println("if " +e);
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-11)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statement ::= Assignment 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        RESULT = a;
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Statement",2, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Grammar ::= Statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                        //parser.processNode(s);
                        System.out.println(s);
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Grammar",0, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Grammar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticParser$parser.done_parsing();
          return CUP$SyntacticParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Grammar ::= Grammar Statement 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$SyntacticParser$stack.peek()).value;
		
                       //parser.processNode(s);
                        System.out.println(s);
                    
              CUP$SyntacticParser$result = parser.getSymbolFactory().newSymbol("Grammar",0, ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.elementAt(CUP$SyntacticParser$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticParser$stack.peek()), RESULT);
            }
          return CUP$SyntacticParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

