package ar.edu.unrc.asp.cfgbuilder.parser;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import ar.edu.unrc.asp.cfgbuilder.CFGBuilder;
import ar.edu.unrc.asp.cfgbuilder.Node;

parser code {:   

    private Map<String, Node> nodes = new HashMap<>();

    private CFGBuilder cfgBuilder = new CFGBuilder();

    private Node currentNode;

    public CFGBuilder getCfgBuilder(){
        return cfgBuilder;
    }

    public Map<String, Node> getNodes(){
        return nodes;
    }

    public Node getCurrentNode(){
        return currentNode;
    }

    public void setCurrentNode(Node replace){
        currentNode = replace;
    }
:};
/******************** terminales y no terminales *************************/

terminal PLUS, MINUS, TIMES, SLASH, LPAREN, RPAREN, LBRACE, RBRACE, BECOMES, EQL, LSS, GRT, DOSYM, IFSYM, ELSESYM, THENSYM, WHILESYM;
terminal String ID, INT;

non terminal Object Grammar, Expression, Statement, Assignment, Value;
non terminal String Identifier, Integer;

/******************** gramÃ¡tica *************************/
Grammar  ::= Statement:s Grammar:g 
                    {:
                        Node newNode = (Node) s;
                        newNode.addNexts("next", (Node) g);
                        if(parser.getCfgBuilder().getStartNode() == null){
                                parser.getCfgBuilder().setStartNode(newNode);
                        }
                        RESULT = newNode;
                    :}  
                | Statement:s 
                    {:      
                        Node newNode = (Node) s;
                        if(parser.getCfgBuilder().getStartNode() == null){
                                parser.getCfgBuilder().setStartNode(newNode);
                        }
                        RESULT = newNode;
                    :}
                ;
Statement   ::= Assignment:a
                    {:                          
                        RESULT = new Node((String)a);                        
                    :}
                |   IFSYM LPAREN Expression:e RPAREN THENSYM LBRACE Grammar:s1 RBRACE ELSESYM LBRACE Grammar:s2 RBRACE
                    {:                         
                        Node exp = new Node((String)e);
                        //Node ifTrue = (Node) s1;
                        //Node ifFalse = (Node) s2;
                        //exp.addNexts("ifTrue", ifTrue);
                        //exp.addNexts("ifFalse", ifFalse);
                        RESULT = exp;
                    :}
                |   IFSYM LPAREN Expression:e RPAREN THENSYM LBRACE Grammar:s RBRACE
                    {:                        
                        Node exp = new Node((String)e);
                        Node ifTrue = (Node) s;
                        exp.addNexts("ifTrue", ifTrue);
                        RESULT = exp;
                    :}
                |   DOSYM LBRACE Grammar:s RBRACE WHILESYM LPAREN Expression:e RPAREN
                    {:                      
                        //parser.processNode(e);
                        System.out.println(e);
                    :}
                ;

Assignment  ::= Identifier:i BECOMES Expression:e
                    {:
                      RESULT = new String(i.toString() + ":=" + e.toString());
                    :}
                ;

Expression  ::= Value:i
                    {:
                        RESULT = i;
                    :}                
                |   Value:i1 PLUS Value:i2
                    {:
                        RESULT = new String(i1.toString() + "+" +  i2.toString());
                    :}
                |   Value:i1 MINUS Value:i2
                    {:
                        RESULT = new String(i1.toString() + "-" + i2.toString());
                    :}
                |   Value:i1 TIMES Value:i2
                    {:
                        RESULT = new String(i1.toString() + "*" + i2.toString());
                    :}
                |   Value:i1 SLASH Value:i2
                    {:
                        RESULT = new String(i1.toString() + "/" + i2.toString());
                    :}
                |   Identifier:i1 GRT Value:i2
                    {:
                        RESULT = new String(i1.toString() + ">" + i2.toString());
                    :}
                |   Identifier:i1 LSS Value:i2
                    {:
                        RESULT = new String(i1.toString() + "<" + i2.toString());
                    :}
                |   Identifier:i1 EQL Value:i2
                    {:
                        RESULT = new String(i1.toString() + "==" + i2.toString());
                    :}
                ;

Value       ::= Identifier:i
                {:
                    RESULT = i;
                :}
                |   Integer:i
                {:
                    RESULT = i;
                :}
                ;

Identifier  ::= ID:i
                {:
                    RESULT = i;
                :}
                ;

Integer     ::= INT:i
                {:
                    RESULT = i;
                :}
                ;