package ar.edu.unrc.asp.cfgbuilder.parser;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.LinkedList;
import ar.edu.unrc.asp.cfgbuilder.CFGBuilder;
import ar.edu.unrc.asp.model.Node;

parser code {:   

    public int endIfCounter=0;
    public int endDoCounter=0;
    private int nodeCounter=0;
    public List<Node> nodeList = new LinkedList<>();

    public String getNodeName(){
        return "n" + nodeCounter++;
    }
    
:};
/******************** terminales y no terminales *************************/

terminal PLUS, MINUS, TIMES, SLASH, LPAREN, RPAREN, LBRACE, RBRACE, BECOMES, EQL, LSS, GRT, DOSYM, IFSYM, ELSESYM, THENSYM, WHILESYM;
terminal String ID, INT;

non terminal Object Grammar, Expression, Statement, Assignment, Value;
non terminal String Identifier, Integer;

/******************** gramÃ¡tica *************************/
Grammar  ::= Statement:s Grammar:g 
                    {:
                        Node newNode = (Node) s;
                        Node lastNode = newNode.getLast();
                        Node grammarNode = (Node) g;
                        grammarNode.addPrevious(lastNode);
                        lastNode.addNexts("next", grammarNode);
                        RESULT = newNode;
                    :}  
                | Statement:s 
                    {:      
                        Node newNode = (Node) s;
                        RESULT = newNode;
                    :}
                ;
Statement   ::= Assignment:a
                    {:                          
                        Node n = new Node(parser.getNodeName(), (String)a);                                                
                        parser.nodeList.add(n);
                        RESULT = n;
                    :}
                |   IFSYM LPAREN Expression:e RPAREN THENSYM LBRACE Grammar:s1 RBRACE ELSESYM LBRACE Grammar:s2 RBRACE
                    {:                         
                        Node exp = new Node(parser.getNodeName(), (String)e);                        
                        parser.nodeList.add(exp);
                        Node ifTrue = (Node) s1;
                        Node ifFalse = (Node) s2;
                        ifTrue.addPrevious(exp);
                        ifFalse.addPrevious(exp);
                        exp.addNexts("ifTrue", ifTrue);
                        exp.addNexts("ifFalse", ifFalse);

                        Node endIf = new Node(parser.getNodeName(), "endIf" + parser.endIfCounter);
                        parser.nodeList.add(endIf);
                        parser.endIfCounter++;

                        Node lastNodeIfTrue = ifTrue.getLast();
                        lastNodeIfTrue.addNexts("next", endIf);

                        Node lastNodeIfFalse = ifFalse.getLast();
                        lastNodeIfFalse.addNexts("next", endIf);
                        endIf.addPrevious(lastNodeIfTrue);
                        endIf.addPrevious(lastNodeIfFalse);
                        RESULT = exp;
                    :}
                |   IFSYM LPAREN Expression:e RPAREN THENSYM LBRACE Grammar:s RBRACE
                    {:                        
                        Node exp = new Node(parser.getNodeName(), (String)e);
                        parser.nodeList.add(exp);
                        Node ifTrue = (Node) s;
                        exp.addNexts("ifTrue", ifTrue);
                        ifTrue.addPrevious(exp);

                        Node endIf = new Node(parser.getNodeName(), "endIf" + parser.endIfCounter);
                        parser.nodeList.add(endIf);
                        parser.endIfCounter++;

                        Node lastNodeIfTrue = ifTrue.getLast();
                        lastNodeIfTrue.addNexts("next", endIf);
                        endIf.addPrevious(lastNodeIfTrue);
                        endIf.addPrevious(exp);
                        exp.addNexts("ifFalse", endIf);
                        RESULT = exp;
                    :}
                |   DOSYM LBRACE Grammar:s RBRACE WHILESYM LPAREN Expression:e RPAREN
                    {:                      
                        Node doBody = (Node) s;

                        Node lastDoBody = doBody.getLast();
                        Node exp = new Node(parser.getNodeName(), (String)e);
                        parser.nodeList.add(exp);
                        lastDoBody.addNexts("exp", exp);

                        Node endDo = new Node(parser.getNodeName(), "endDo" + parser.endDoCounter++);
                        parser.nodeList.add(endDo);
                        exp.addNexts("ifFalse", endDo);
                        exp.addNexts("ifTrue", doBody);
                        exp.addPrevious(lastDoBody);
                        endDo.addPrevious(lastDoBody);
                        RESULT = doBody;
                    :}
                ;

Assignment  ::= Identifier:i BECOMES Expression:e
                    {:
                      RESULT = new String(i.toString() + ":=" + e.toString());
                    :}
                ;

Expression  ::= Value:i
                    {:
                        RESULT = i;
                    :}                
                |   Value:i1 PLUS Value:i2
                    {:
                        RESULT = new String(i1.toString() + "+" +  i2.toString());
                    :}
                |   Value:i1 MINUS Value:i2
                    {:
                        RESULT = new String(i1.toString() + "-" + i2.toString());
                    :}
                |   Value:i1 TIMES Value:i2
                    {:
                        RESULT = new String(i1.toString() + "*" + i2.toString());
                    :}
                |   Value:i1 SLASH Value:i2
                    {:
                        RESULT = new String(i1.toString() + "/" + i2.toString());
                    :}
                |   Identifier:i1 GRT Value:i2
                    {:
                        RESULT = new String(i1.toString() + ">" + i2.toString());
                    :}
                |   Identifier:i1 LSS Value:i2
                    {:
                        RESULT = new String(i1.toString() + "<" + i2.toString());
                    :}
                |   Identifier:i1 EQL Value:i2
                    {:
                        RESULT = new String(i1.toString() + "==" + i2.toString());
                    :}
                ;

Value       ::= Identifier:i
                {:
                    RESULT = i;
                :}
                |   Integer:i
                {:
                    RESULT = i;
                :}
                ;

Identifier  ::= ID:i
                {:
                    RESULT = i;
                :}
                ;

Integer     ::= INT:i
                {:
                    RESULT = i;
                :}
                ;